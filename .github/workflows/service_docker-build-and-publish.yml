name: Build and Publish Docker Images

on:
  workflow_call:
    inputs:
      release_type:
        type: string
        required: true
        description: 'Release type (latest, beta, edge, dev, etc)'
        default: 'edge'
      push:
        type: boolean
        required: true
        description: 'Push to Docker Hub and GitHub Container Registry'
        default: true

jobs:
  build-and-push:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        base_os:
          - alpine:3.20
          - debian:bookworm-slim
    steps:
      - name: Check out code.
        uses: actions/checkout@v4

      - name: Read GitHub CLI version
        id: gh_version
        run: |
          GH_VERSION=$(cat github-cli-build-version.txt | tr -d '\n')
          echo "version=${GH_VERSION}" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set REPOSITORY_BUILD_VERSION
        id: set_version
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "🚀 Setting REPOSITORY_BUILD_VERSION to Tag"
            echo "REPOSITORY_BUILD_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "👨‍🔬 Setting REPOSITORY_BUILD_VERSION to GIT Short SHA and GitHub Run ID"
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            echo "REPOSITORY_BUILD_VERSION=git-${SHORT_SHA}-${{ github.run_id }}" >> $GITHUB_ENV
          fi
      
      - name: Prepare Docker tags
        run: |
          # Initialize empty DOCKER_TAGS variable
          DOCKER_TAGS=""
          
          BASE_OS_TRIMMED=$(echo ${{ matrix.base_os }} | cut -d':' -f1)
          
          # Build tags string directly
          DOCKER_TAGS="docker.io/serversideup/github-cli:${BASE_OS_TRIMMED}-${{ steps.gh_version.outputs.version }}"
          DOCKER_TAGS="${DOCKER_TAGS},ghcr.io/serversideup/github-cli:${BASE_OS_TRIMMED}-${{ steps.gh_version.outputs.version }}"
          DOCKER_TAGS="${DOCKER_TAGS},docker.io/serversideup/github-cli:${BASE_OS_TRIMMED}"
          DOCKER_TAGS="${DOCKER_TAGS},ghcr.io/serversideup/github-cli:${BASE_OS_TRIMMED}"
          
          if [[ "${{ matrix.base_os }}" == "debian"* ]]; then
            DOCKER_TAGS="${DOCKER_TAGS},docker.io/serversideup/github-cli:${{ steps.gh_version.outputs.version }}"
            DOCKER_TAGS="${DOCKER_TAGS},ghcr.io/serversideup/github-cli:${{ steps.gh_version.outputs.version }}"
            DOCKER_TAGS="${DOCKER_TAGS},docker.io/serversideup/github-cli:${{ inputs.release_type }}"
            DOCKER_TAGS="${DOCKER_TAGS},ghcr.io/serversideup/github-cli:${{ inputs.release_type }}"
          fi
          
          # Set the final DOCKER_TAGS environment variable
          echo "DOCKER_TAGS=${DOCKER_TAGS}" >> $GITHUB_ENV
          
          # Show the tags being generated
          echo "Generated tags:"
          echo "${DOCKER_TAGS}" | tr ',' '\n'

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: src/Dockerfile
          cache-from: type=gha,mode=max
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_BASE_OS_VERSION=${{ matrix.base_os }}
            BUILD_GITHUB_CLI_VERSION=${{ steps.gh_version.outputs.version }}
            REPOSITORY_BUILD_VERSION=${{ env.REPOSITORY_BUILD_VERSION }}
          platforms: |
            linux/amd64
            linux/arm64/v8
          pull: true
          push: ${{ inputs.push }}
          tags: ${{ env.DOCKER_TAGS }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Run GitHub CLI anywhere with the power of Docker
